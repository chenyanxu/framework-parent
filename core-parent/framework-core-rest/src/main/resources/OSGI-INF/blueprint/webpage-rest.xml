<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<blueprint xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
       http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <reference id="systemService" interface="com.kalix.framework.core.api.web.ISystemService"/>
    <camelContext id="webPageCamel" xmlns="http://camel.apache.org/schema/blueprint">
        <!-- configure rest to use the camel-servlet component, and use json binding mode -->
        <!-- and tell to output json in pretty print mode -->
        <!-- setup context path and port number that Apache Tomcat will deploy this application with,
             as we use the servlet component, then we need to aid Camel to tell it these details so Camel
             knows the url to the REST services.
             Notice: This is optional, but needed if the RestRegistry should enlist accurate information.
             You can access the RestRegistry from JMX at runtime -->
        <restConfiguration component="servlet" bindingMode="json">
            <dataFormatProperty key="prettyPrint" value="${rest.pretty}"/>
        </restConfiguration>

        <!-- defines the rest services using the context-path /user -->
        <rest path="/system" consumes="application/json;charset=utf-8" produces="application/json;charset=utf-8">
            <description>Kalix System rest service</description>
            <get id="route-sys-test">
                <to uri="bean:systemService?method=doSysServiceTest"/>
            </get>
            <!-- this is a rest GET to view an user by the given id -->
            <get id="route-getAllApp" uri="/applications" outType="com.kalix.framework.core.api.web.model.WebApplicationBean[]">
                <description>Find user by id</description>
                <to uri="bean:systemService?method=getApplicationList"/>
            </get>

            <!-- this is a rest GET to view an user by the given id -->
            <get id="route-getModuleByAppId" uri="/applications/{id}"
                 outType="com.kalix.framework.core.api.web.model.ModuleBean[]">
                <description>Find Module by Application id</description>
                <to uri="bean:systemService?method=getModuleByApplication(${header.id})"/>
            </get>

            <!-- 菜单管理，通过应用id查找模块列表 -->
            <get id="route-getModulesByAppId" uri="/apps/{id}"
                 outType="com.kalix.framework.core.api.persistence.JsonData">
                <description>Find Only Modules by Application id No Menu</description>
                <to uri="bean:systemService?method=getModulesByAppId(${header.id})"/>
            </get>

            <!-- 菜单管理，通过应用id新增模块 -->
            <post id="route-addModuleByAppId" uri="/apps/{id}"
                  type="com.kalix.framework.core.api.web.model.ModuleBean"
                  outType="com.kalix.framework.core.api.persistence.JsonStatus">
                <description>Create a module by Application id</description>
                <to uri="bean:systemService?method=addModuleByAppId(${header.id})"/>
            </post>

            <!-- 菜单管理，通过应用id修改模块 -->
            <put id="route-setModuleByAppId" uri="/apps/{id}/{cfgKey}"
                 type="com.kalix.framework.core.api.web.model.ModuleBean"
                 outType="com.kalix.framework.core.api.persistence.JsonStatus">
                <description></description>
                <to uri="bean:systemService?method=setModuleByAppId(${header.id},${header.cfgKey})"/>
            </put>

            <!-- 菜单管理，通过应用id删除模块 -->
            <delete id="route-deleteModuleByAppId" uri="/apps/{id}/{cfgKey}"
                    outType="com.kalix.framework.core.api.persistence.JsonStatus">
                <description>Delete a module by Application id</description>
                <to uri="bean:systemService?method=deleteModuleByAppId(${header.id},${header.cfgKey})"/>
            </delete>

            <get id="route-getMenuByModule" uri="/applications/modules/{id}"
                 outType="com.kalix.framework.core.api.web.model.MenuBean[]">
                <description>Find Menu by Module id</description>
                <to uri="bean:systemService?method=getMenuByModule(${header.id})"/>
            </get>

            <!-- 菜单管理，通过模块id查找一级菜单列表 -->
            <get id="route-getMenusByModuleId" uri="/apps/modules/{id}"
                 outType="com.kalix.framework.core.api.persistence.JsonData">
                <description>Find Only First Menus by Module id</description>
                <to uri="bean:systemService?method=getMenusByModuleId(${header.id})"/>
            </get>

            <!-- 菜单管理，通过模块id新增一级菜单 -->
            <post id="route-addMenuByModuleId" uri="/apps/modules/{id}"
                  type="com.kalix.framework.core.api.web.model.MenuBean"
                  outType="com.kalix.framework.core.api.persistence.JsonStatus">
                <description>Create a menu by Module id</description>
                <to uri="bean:systemService?method=addMenuByModuleId(${header.id})"/>
            </post>

            <!-- 菜单管理，通过模块id修改一级菜单 -->
            <put id="route-setMenuByModuleId" uri="/apps/modules/{id}/{cfgKey}"
                 type="com.kalix.framework.core.api.web.model.MenuBean"
                 outType="com.kalix.framework.core.api.persistence.JsonStatus">
                <description></description>
                <to uri="bean:systemService?method=setMenuByModuleId(${header.id},${header.cfgKey})"/>
            </put>

            <!-- 菜单管理，通过模块id删除一级菜单 -->
            <delete id="route-deleteMenuByModuleId" uri="/apps/modules/{id}/{cfgkey}"
                    outType="com.kalix.framework.core.api.persistence.JsonStatus">
                <description>Delete a menu by Module id</description>
                <to uri="bean:systemService?method=deleteMenuByModuleId(${header.id},${header.cfgKey})"/>
            </delete>

            <get id="route-getButtonsByPermission" uri="/applications/modules/children/buttons/{permissions}"
                 outType="java.util.Map">
                <description>Find Button Permission</description>
                <to uri="bean:systemService?method=getButtonsByPermission(${header.permissions})"/>
            </get>

            <get id="route-getLogin" uri="/login"
                 outType="com.kalix.framework.core.api.web.model.LoginBean">
                <description></description>
                <to uri="bean:systemService?method=getLogin()"/>
            </get>
            <get id="route-getUserPreferences" uri="/preferences/{loginName}" outType="java.util.Map">
                <description></description>
                <to uri="bean:systemService?method=getUserPreferences(${header.loginName})"/>
            </get>
            <put id="route-setUserPreferences" uri="/preferences/{loginName}" outType="com.kalix.framework.core.api.persistence.JsonStatus">
                <description></description>
                <to uri="bean:systemService?method=setUserPreferences(${header.loginName},${header.key},${header.value})"/>
            </put>
            <get id="route-sys-vcode-test" uri="/vcode/{appName}" outType="com.kalix.framework.core.api.persistence.JsonStatus">
                <description></description>
                <to uri="bean:systemService?method=doVCodeTest(${header.appName})"/>
            </get>
        </rest>
    </camelContext>
</blueprint>