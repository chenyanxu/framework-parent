# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.

[main]
authc = com.kalix.framework.core.security.authc.filter.OAuth2AuthenticationFilter
logout = com.kalix.framework.core.security.authc.filter.SystemLogoutFilter
#authc = com.kalix.framework.core.jwt.filter.HTTPBearerAuthorizeAttribute
authc.appName=Main
[users]
# format: username = password, role1, role2, ..., roleN
root = secret,admin
guest = guest,guest
presidentskroob = 12345,president
darkhelmet = ludicrousspeed,darklord,schwartz
lonestarr = vespa,goodguy,schwartz

[roles]
# format: roleName = permission1, permission2, ..., permissionN
admin=*
schwartz=lightsaber:*
goodguy=winnebago:drive:eagle5

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
#/login.jsp = authc
#/login.jsp = anon

#/camel/rest/system/login=anon
#/camel/rest/system/vcode/*=anon
/images/kaptcha = anon
/logout = logout
#/rest/** = authc
/*.jsp = authc
#/*.html = authc
#/camel/rest/** = anon
/remoting/** = authc, roles[b2bClient], perms["remote:invoke:lan,wan"]
/** = authc